
import { relative, isAbsolute, join } from 'pathe'
import type { Component, NuxtPlugin } from '@nuxt/schema'
import { genDynamicImport, genObjectFromRawEntries } from 'knitwork'

export type ComponentsTemplateOptions = {
  buildDir?: string
  components: Component[]
}

export type ImportMagicCommentsOptions = {
  chunkName:string
  prefetch?: boolean | number
  preload?: boolean | number
}

const createImportMagicComments = (options: ImportMagicCommentsOptions) => {
  const { chunkName, prefetch, preload } = options
  return [
    `webpackChunkName: "${chunkName}"`,
    prefetch === true || typeof prefetch === 'number' ? `webpackPrefetch: ${prefetch}` : false,
    preload === true || typeof preload === 'number' ? `webpackPreload: ${preload}` : false
  ].filter(Boolean).join(', ')
}

export function getComponentPath (component: Component, mode?: NuxtPlugin['mode']) {
  if (!component.envPaths || !mode || mode === 'all') {
    return component.filePath
  }
  const envPath = mode === 'client'
    ? component.envPaths.client
    : component.envPaths.server
  return envPath || '#app/components/nuxt-empty'
}

function getComponentTemplate (components: Component[], mode: NuxtPlugin['mode']) {
  return `import { defineAsyncComponent, h as __h } from 'vue'
import { wrapClientOnly } from '#app/components/client-only'

const components = ${genObjectFromRawEntries(components.filter(c => c.global === true).map((c) => {
  let exp = c.export === 'default' ? 'c.default || c' : `c['${c.export}']`
  const comment = createImportMagicComments(c)
  const path = getComponentPath(c, mode)
  if (c.envPaths) {
    exp = `wrapClientOnly(${exp}, '${mode}')`
  }

  return [c.pascalName, `defineAsyncComponent(${genDynamicImport(path, { comment })}.then(c => ${exp}))`]
}))}

export default function (nuxtApp) {
  for (const name in components) {
    nuxtApp.vueApp.component(name, components[name])
    nuxtApp.vueApp.component('Lazy' + name, components[name])
  }
}
`
}

export const componentsClientTemplate = {
  filename: 'components-client.mjs',
  mode: 'client' as const,
  getContents ({ options }: { options: ComponentsTemplateOptions }) {
    return getComponentTemplate(options.components, 'client')
  }
}

export const componentsServerTemplate = {
  filename: 'components-server.mjs',
  mode: 'server' as const,
  getContents ({ options }: { options: ComponentsTemplateOptions }) {
    return getComponentTemplate(options.components, 'server')
  }
}

export const componentsTypeTemplate = {
  filename: 'types/components.d.ts',
  getContents: ({ options }: { options: ComponentsTemplateOptions }) => `// Generated by components discovery
declare module 'vue' {
  export interface GlobalComponents {
${options.components
  .map((c) => {
    const filePath = c.envPaths?.client || c.filePath
    const dynamicImport = genDynamicImport(isAbsolute(filePath)
      ? relative(join(options.buildDir, 'types'), filePath)
      : filePath, { wrapper: false })
    return `    '${c.pascalName}': typeof ${dynamicImport}['${c.export}']`
  })
  .join(',\n')
}
  }
}
export {}
`
}
